// Code generated by gvk-dirs-generator DO NOT EDIT.
package corev1gvk

import (
	"reflect"
	"k8s.io/api/core/v1"
)
var Binding = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.Binding{}).Name())
var ConfigMap = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.ConfigMap{}).Name())
var ConfigMapList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.ConfigMapList{}).Name())
var Endpoints = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.Endpoints{}).Name())
var EndpointsList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.EndpointsList{}).Name())
var Event = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.Event{}).Name())
var EventList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.EventList{}).Name())
var LimitRange = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.LimitRange{}).Name())
var LimitRangeList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.LimitRangeList{}).Name())
var Namespace = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.Namespace{}).Name())
var NamespaceList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.NamespaceList{}).Name())
var Node = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.Node{}).Name())
var NodeList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.NodeList{}).Name())
var PersistentVolume = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.PersistentVolume{}).Name())
var PersistentVolumeList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.PersistentVolumeList{}).Name())
var PersistentVolumeClaim = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.PersistentVolumeClaim{}).Name())
var PersistentVolumeClaimList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.PersistentVolumeClaimList{}).Name())
var Pod = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.Pod{}).Name())
var PodList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.PodList{}).Name())
var PodTemplate = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.PodTemplate{}).Name())
var PodTemplateList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.PodTemplateList{}).Name())
var RangeAllocation = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.RangeAllocation{}).Name())
var ReplicationController = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.ReplicationController{}).Name())
var ReplicationControllerList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.ReplicationControllerList{}).Name())
var ResourceQuota = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.ResourceQuota{}).Name())
var ResourceQuotaList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.ResourceQuotaList{}).Name())
var Secret = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.Secret{}).Name())
var SecretList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.SecretList{}).Name())
var Service = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.Service{}).Name())
var ServiceList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.ServiceList{}).Name())
var ServiceAccount = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.ServiceAccount{}).Name())
var ServiceAccountList = v1.SchemeGroupVersion.WithKind(reflect.TypeOf(&v1.ServiceAccountList{}).Name())
